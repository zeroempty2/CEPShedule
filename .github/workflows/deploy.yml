name: Deploy to Amazon EC2 using Docker

on:
  workflow_run:
    workflows: ["CI for Spring Boot"]  # CI 워크플로우 이름
    types:
      - completed  # CI 워크플로우 완료 시 트리거
    branches:
      - main    # main 브랜치에서만 트리거
  # workflow_dispatch: 

env:
  AWS_REGION: ap-northeast-2
  DOCKER_IMAGE_NAME: 2zeroempty/cepschedule
  EC2_HOST: ec2-user@52.79.209.72 
  EC2_CONTAINER_NAME: scheduler   

permissions:
  contents: read
jobs:
  deploy:
    name: Build and Deploy Docker Image
    runs-on: ubuntu-latest
    environment: production

    steps:
      # (1) 기본 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # (2) JDK 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # (3) Gradle 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: clean build -x test  # 테스트 포함 여부에 따라 옵션 변경 가능

      # (4) Docker 설정 및 로그인
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
            
      # (5) Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image
        run: |
            docker system prune --all --force
            docker build --no-cache \
            --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }} \
            --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
            docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

      # (6) SSH 키 파일 생성
      - name: Create SSH key file
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | sudo tee ~/ec2_key.pem > /dev/null
          sudo mkdir -p ~/.ssh
          sudo mv ~/ec2_key.pem ~/.ssh/ec2_key.pem
          sudo chown runner:runner ~/.ssh/ec2_key.pem
          sudo chmod 600 ~/.ssh/ec2_key.pem
      # (7) EC2에 SSH로 연결하여 Docker 컨테이너 배포
      - name: Deploy to EC2
        run: |
          ssh -vvv -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem -p 2200 ec2-user@52.79.209.72 << 'EOF'
            sudo systemctl start docker || echo "Docker is already running."
            docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
            docker stop ${{ env.EC2_CONTAINER_NAME }} || true
            docker rm ${{ env.EC2_CONTAINER_NAME }} || true
            docker run -d --name ${{ env.EC2_CONTAINER_NAME }} -p 8081:8081 \
              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              -e DB_SOURCE_URL=${{ secrets.DB_SOURCE_URL }} \
              -e DB_SOURCE_USERNAME=${{ secrets.DB_SOURCE_USERNAME }} \
              -e DB_SOURCE_PASSWORD=${{ secrets.DB_SOURCE_PASSWORD }} \
              ${{ env.DOCKER_IMAGE_NAME }}:latest
          EOF
